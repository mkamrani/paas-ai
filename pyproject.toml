[build-system]
requires = ["setuptools>=64", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "paas-ai"
version = "0.1.0"
description = "Agentic Platform as a Service Configuration Generator"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "PaaS AI Team", email = "team@paas-ai.dev"}
]
keywords = ["paas", "ai", "agent", "kubernetes", "docker", "terraform", "configuration"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Code Generators",
    "Topic :: System :: Systems Administration",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
]
requires-python = ">=3.11,<3.13"

# Core dependencies
dependencies = [
    # CLI framework
    "click>=8.1.7",
    "rich>=13.7.0",           # Rich terminal output
    "colorama>=0.4.6",        # Cross-platform colored terminal text
    
    # Configuration and serialization
    "pydantic>=2.5.0",       # Data validation and settings
    "PyYAML>=6.0.1",         # YAML support
    
    # File operations and utilities
    "python-dotenv>=1.0.0", # Environment variable loading
    
    # Date and time
    "python-dateutil>=2.8.2",
    
    # Type checking utilities
    "typing-extensions>=4.8.0",
    "langgraph-supervisor (>=0.0.29,<0.0.30)",
    "langgraph-swarm (>=0.0.14,<0.0.15)",
]

# Optional dependencies for different components
[project.optional-dependencies]
# RAG system dependencies
rag = [
    # Vector databases
    "chromadb>=0.4.18",       # ChromaDB vector store
    "qdrant-client>=1.7.0",   # Qdrant vector store
    "pinecone-client>=2.2.4", # Pinecone vector store
    
    # Embeddings and ML
    "sentence-transformers>=2.2.2",  # Sentence embeddings
    "openai>=1.6.0",          # OpenAI API client
    "tiktoken>=0.5.1",        # OpenAI tokenizer
    
    # Document processing
    "langchain>=0.1.0",       # LangChain framework
    "langchain-community>=0.0.10",  # LangChain community integrations
    "beautifulsoup4>=4.12.2", # HTML parsing
    "lxml>=4.9.3",            # XML/HTML parser
    "pypdf>=3.17.0",          # PDF processing
    "python-docx>=1.1.0",    # Word document processing
    "python-pptx>=0.6.23",   # PowerPoint processing
    
    # Text processing  
    "nltk>=3.8.1",            # Natural language toolkit
    "rank-bm25>=0.2.2",       # BM25 ranking
    
    # Web scraping
    "selenium>=4.15.0",       # Web automation
    "playwright>=1.40.0",     # Modern web automation
    "requests-html>=0.10.0",  # HTML scraping
    
    # Content extraction
    "trafilatura>=1.6.3",     # Web content extraction
    "newspaper3k>=0.2.8",     # News article extraction
]

# Agent framework dependencies
agent = [
    "langgraph>=0.0.20",       # LangGraph for agent workflows
    "langgraph-supervisor>=0.0.29",  # LangGraph supervisor for multi-agent coordination
    "langchain>=0.1.0",        # LangChain base
    "langchain-openai>=0.0.2", # OpenAI integration
    "langchain-anthropic>=0.1.0", # Anthropic integration
]

# MCP (Model Context Protocol) dependencies
mcp = [
    "mcp>=0.1.0",             # MCP client library
    "websockets>=12.0",        # WebSocket support
    "psutil>=5.9.6",          # Process monitoring
]

# API server dependencies
api = [
    "fastapi>=0.104.0",       # Modern web framework
    "uvicorn>=0.24.0",        # ASGI server
    "python-multipart>=0.0.6", # Form data parsing
    "jinja2>=3.1.2",          # Template engine
]

# Database dependencies
database = [
    "sqlalchemy>=2.0.23",     # SQL toolkit
    "alembic>=1.13.0",        # Database migrations
    "asyncpg>=0.29.0",        # Async PostgreSQL
    "aiosqlite>=0.19.0",      # Async SQLite
]

# External integrations
integrations = [
    "atlassian-python-api>=3.41.0",  # Confluence API
    "pygithub>=2.1.1",        # GitHub API
    "kubernetes>=28.1.0",     # Kubernetes client
    "docker>=6.1.3",          # Docker client
    "boto3>=1.34.0",          # AWS SDK
    "azure-identity>=1.15.0", # Azure authentication
    "google-cloud-storage>=2.10.0", # Google Cloud
]

# Development dependencies
dev = [
    # Testing
    "pytest>=7.4.3",
    "pytest-cov>=4.1.0",
    
    # Code quality
    "black>=23.11.0",         # Code formatting
    "isort>=5.12.0",          # Import sorting
    "mypy>=1.7.0",            # Type checking
]

# All optional dependencies combined
all = [
    # RAG dependencies
    "chromadb>=0.4.18",
    "qdrant-client>=1.7.0",
    "sentence-transformers>=2.2.2",
    "openai>=1.6.0",
    "langchain>=0.1.0",
    "beautifulsoup4>=4.12.2",
    "rank-bm25>=0.2.2",
    
    # Agent dependencies  
    "langgraph>=0.0.20",
    "langgraph-supervisor>=0.0.29",
    "langchain-openai>=0.0.2",
    
    # MCP dependencies
    "websockets>=12.0",
    "psutil>=5.9.6",
    
    # API dependencies
    "fastapi>=0.104.0",
    "uvicorn>=0.24.0",
    
    # Database dependencies
    "sqlalchemy>=2.0.23",
    
    # Integration dependencies
    "atlassian-python-api>=3.41.0",
    "kubernetes>=28.1.0",
]

[project.urls]
Homepage = "https://github.com/paas-ai/paas-ai"
Documentation = "https://docs.paas-ai.dev"
Repository = "https://github.com/paas-ai/paas-ai.git"
Issues = "https://github.com/paas-ai/paas-ai/issues"

[project.scripts]
paas-ai = "paas_ai.cli.main:main"

# Development scripts
[tool.poe.tasks]
test = "pytest"
test-unit = "pytest tests/unit -v"
test-integration = "pytest tests/integration -v"
test-rag = "pytest tests/unit/test_cli/test_commands/test_rag tests/unit/test_core/test_rag -v"
test-coverage = "pytest --cov=paas_ai --cov-report=html --cov-report=term"
test-fast = "pytest --no-cov -x"

# Setuptools configuration
[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
paas_ai = ["py.typed"]

# Black code formatting
[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort import sorting
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# MyPy type checking
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "chromadb.*",
    "qdrant_client.*", 
    "pinecone.*",
    "sentence_transformers.*",
    "rank_bm25.*",
    "atlassian.*",
    "langchain.*",
    "langgraph.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=paas_ai",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Bandit security linting
[tool.bandit]
exclude_dirs = ["tests", "test_*"]
skips = ["B101", "B601"]

[tool.poetry.group.rag.dependencies]
langchain-chroma = "^0.2.5"
faiss-cpu = "^1.12.0"
unstructured = "^0.18.14"
markdown = "^3.9"

